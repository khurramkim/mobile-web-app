{"version":3,"sources":["logo.svg","cat.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","list","text","handleChange","bind","assertThisInitialized","handleSubmit","removeList","removeListAll","event","setState","target","value","newItem","id","Date","now","length","preventDefault","concat","console","log","filtered","filter","index","arr","rmvBtn","_this2","react_default","a","createElement","className","type","onClick","onChange","map","item","key","Component","Boolean","window","location","hostname","match","setInterval","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dd63cd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/cat.4301422f.jpg\";","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport cat from './cat.jpg';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {list : [], text: ''  };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.removeList = this.removeList.bind(this);\n      this.removeListAll = this.removeListAll.bind(this);\n    }\n\n    \n\n    handleChange(event) {\n      this.setState({text: event.target.value});\n    }\n\n\n\n    handleSubmit(event) {\n      const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n\n      if (!this.state.text.length) {\n      return;\n    }\n      event.preventDefault();\n      this.setState(state => ({\n      list: state.list.concat(newItem),\n      text : ''\n    }));\n      \n    }\n\n    removeList(id) {\n\n      console.log(id);\n      console.log(this.state.list);\n      \n      var filtered = this.state.list.filter(function(value, index, arr){\n\n      return value.id !== id;\n\n      });\n\n      console.log(filtered);\nthis.setState(state => ({\n      list: filtered\n      \n    }));\n    }\n\n\n    removeListAll() {\n      this.setState({list: []});\n    }\n\n\n    render() {\n        \n        let rmvBtn;\n\n        if(this.state.list.length) {\n           rmvBtn = <button className=\"btn btn-primary removeall\" type=\"button\" onClick={this.removeListAll}>Remove All</button>;\n        }\n\n        else {\n          rmvBtn = '';\n        }\n\n        \n\n        return (\n            <div className=\"container mt-5 mt-5\">\n              <div className=\"row\">\n              <div className=\"col-lg-4 offset-lg-4 \">\n              <div className=\"form-inline\">\n              <input className=\"form-control\" type=\"text\" value={this.state.text} onChange={this.handleChange} />\n              <button className=\"btn btn-primary\" type=\"button\" onClick={this.handleSubmit}>Submit</button>\n    \n              <ul className=\"list-group mt-3 mb-3\">\n                {this.state.list.map((item,index) => (\n                  <li className=\"list-group-item\" key={item.id}>{index + 1} / {item.text} <button className=\"btn btn-primary\" type=\"button\" onClick={() => this.removeList(item.id)}>Remove</button></li>\n                ))} \n              </ul>\n            \n              {rmvBtn}  \n            \n              </div>\n              </div>\n              </div>\n            </div>\n        );\n    }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Data from './comp1';\n// import Data2 from './comp2';\nimport * as serviceWorker from './serviceWorker';\n\nsetInterval(function(){\n\tReactDOM.render(<App/>, document.getElementById('root'));\n},1000);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}